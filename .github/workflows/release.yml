name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-pc-windows-gnu, x86_64-apple-darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross
        run: cargo install cross

      - name: Build with cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Show build output
        run: ls -R target/

      - name: Package binary
        run: |
          mkdir -p dist
          BIN_NAME=onion_scraper
          TARGET=${{ matrix.target }}

          if [[ "$TARGET" == *windows* ]]; then
            BIN_PATH="target/$TARGET/release/${BIN_NAME}.exe"
          else
            BIN_PATH="target/$TARGET/release/${BIN_NAME}"
          fi

          if [ ! -f "$BIN_PATH" ]; then
            echo "‚ùå Binary not found at: $BIN_PATH"
            exit 1
          fi

          ARCHIVE_NAME="${BIN_NAME}-${TARGET}.tar.gz"
          mkdir -p tmp && cp "$BIN_PATH" tmp/
          tar -czf dist/$ARCHIVE_NAME -C tmp .
          rm -rf tmp

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
